[tool.poetry]
name = "{{ cookiecutter.project_slug }}"
version = "{{ cookiecutter.version }}"
description = "{{ cookiecutter.project_short_description }}"
authors = ["{{ cookiecutter.author }} <{{ cookiecutter.email }}>"]
readme = "README.md"
licence = "{{ cookiecutter.license }}"

[tool.poetry.urls]
Changelog = "https://github.com/{{ cookiecutter.github_username }}/{{ cookiecutter.project_slug }}/releases"

[tool.poetry.scripts]
{{ cookiecutter.project_slug }} = "{{ cookiecutter.package_name }}.__main__:main"

[tool.poetry.dependencies]
python = ">=3.11.0,<3.13.0"
pyspark = "^3.5.0"
pyarrow = "^15.0.0"
delta-spark = "^3.1.0"
pyyaml = "^6.0.1"
pendulum = "^3.0.0"

[tool.poetry.group.dev.dependencies]
Pygments = "^2.16.1"
coverage = {extras = ["toml"], version = "^7.3.2"}
darglint = "^1.8.1"
mypy = "^1.5.1"
pre-commit-hooks = "^4.4.0"
pytest = "^8.0.1"
safety = "^2.3.5"
certifi = "^2023.7.22"
pip-system-certs = "^4.0"
pytest-cov = "^4.1.0"
pre-commit = "^3.4.0"
ruff = "^0.2.2"
typeguard = "^4.1.5"
nox = ^2024.3.2
nox-poetry = ^1.0.3
{% if cookiecutter.automated_sphinx_docs.lower() != 'n' %}
sphinx = "^7.2.6"
sphinx-autobuild = "^2021.3.14"
furo = "^2023.9.10"
xdoctest = {extras = ["colors"], version = "^1.1.2"}
myst-parser = {version = "^2.0.0"}
{% endif %}

[tool.ruff]
line-length = 100
lint.ignore = [
    "E501",  # line too long, handled by black
    "E731",  # lambda assignment
]
lint.select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "UP",  # pyupgrade
]

[tool.ruff.lint.isort]
section-order = ["future", "standard-library", "third-party", "first-party", "local-folder"]
known-first-party = ["{{ cookiecutter.package_name }}"]

[tool.ruff.lint.per-file-ignores]
"__init__.py" = ["F401", "F403"]

[tool.coverage.paths]
source = ["src", "*/site-packages"]
tests = ["tests", "*/tests"]

[tool.coverage.run]
branch = true
source = ["{{ cookiecutter.package_name }}", "tests"]

[tool.coverage.report]
fail_under = 80

[tool.mypy]
strict = true
warn_unreachable = true
pretty = true
show_column_numbers = true
show_error_codes = true
show_error_context = true

[build-system]
requires = ["poetry-core"]
build-backend = "poetry.core.masonry.api"
